# Requires
fs = require "fs"
{spawn, exec} = require "child_process"
util = require "util"
Rehab = require "rehab"
uglify = require "uglify-js"
path = require "path"

# Global objects
bold = `'\033[0;1m'`
green = `'\033[0;32m'`
reset = `'\033[0m'`
red = `'\033[0;31m'`

config =
  srcDir: "src"
  testDir: "test"
  outDir: path.resolve __dirname, "../../public/js"
  testOutDir: path.resolve __dirname, "../../public/js/test"
  outFileName: "app.min.js"

opts = {}
coffeeopts = []
uglyopts = []

# Helper functions
log = (message, color, explanation) -> console.log color + message + reset + ' ' + (explanation or '')

uglify =  (callback) ->
  ugl = exec "uglifyjs " + uglyopts.join " "
  throw process.err if process.err
  ugl.stdout.pipe(process.stdout)
  ugl.stderr.pipe(process.stderr)
  ugl.on 'exit', (status) ->
    callback?() if status is 0 else log "ERROR", red
    fs.unlink uglyopts[uglyopts.length - 1]

compile = (callback) ->
  cafe = exec "coffee " + coffeeopts.join " "
  throw process.err if process.err
  cafe.stdout.pipe(process.stdout)
  cafe.stderr.pipe(process.stderr)
  cafe.stdout.on 'data', uglify
  cafe.stderr.on 'data', uglify
  cafe.on 'exit', (status) ->
    callback?() if status is 0 else log "ERROR", red
    uglify callback

# CLI options
option "-d", "--directory [DIR]", "The input directory name"
option "-f", "--file [FILE]", "The input file name"
option "-o", "--output [FILE]", "The output file name"

# Broker function
go = (watch, options, callback) ->
  opts.directory = if options.directory? then path.resolve __dirname, config.srcDir, options.directory else path.resolve __dirname, config.srcDir
  opts.file = if options.file? then path.resolve __dirname, config.srcDir, options.file
  opts.outfile = if options.output? then options.output else config.outFileName
  opts.outpath = path.resolve config.outDir, opts.outfile

  if not opts.file?
    opts.file = new Rehab().process opts.directory
    opts.file = opts.file.join " "

  coffeeopts = ["-j", path.resolve(__dirname, config.srcDir, opts.outfile), "-c", opts.file]
  coffeeopts.unshift '-w' if watch

  uglyopts = ["-o", opts.outpath, path.resolve(__dirname, config.srcDir, opts.outfile)]
  compile callback


# Tasks
task "build", "Build coffee2js using Rehab", (options) -> go false, options, log "COMPILED", green
task "watch", "Watch a file or folder, then compile and uglify", (options) -> go true, options, log ":-)", green